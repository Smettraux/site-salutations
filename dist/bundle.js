/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (function() { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./config":
/*!****************!*\
  !*** ./config ***!
  \****************/
/***/ (function() {

eval("SHEETS_API_KEY='AIzaSyCyoD2jLbNTcRWqzLdYpQeD0aP-xZSB6ak'\r\nSHEET_ID = '1nfoO1wUELBQgdBQJUoFPko1kZRV7yXla2dnfBQkJGqE'//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9jb25maWcuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3NhbHV0YXRpb25zLy4vY29uZmlnPzNlMGQiXSwic291cmNlc0NvbnRlbnQiOlsiU0hFRVRTX0FQSV9LRVk9J0FJemFTeUN5b0QyakxiTlRjUldxekxkWXBRZUQwYVAteFpTQjZhaydcclxuU0hFRVRfSUQgPSAnMW5mb08xd1VFTEJRZ2RCUUpVb0ZQa28xa1pSVjd5WGxhMmRuZkJRa0pHcUUnIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./config\n");

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var css_main_css__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! css/main.css */ \"./src/css/main.css\");\n/* harmony import */ var css_icomoon_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! css/icomoon.css */ \"./src/css/icomoon.css\");\n/* harmony import */ var css_constants_css__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! css/constants.css */ \"./src/css/constants.css\");\n/* harmony import */ var regenerator_runtime_runtime__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! regenerator-runtime/runtime */ \"./node_modules/regenerator-runtime/runtime.js\");\n/* harmony import */ var regenerator_runtime_runtime__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(regenerator_runtime_runtime__WEBPACK_IMPORTED_MODULE_3__);\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n\n\n\n\n\nvar _require = __webpack_require__(/*! contrast-color */ \"./node_modules/contrast-color/lib/index.js\"),\n    contrastColor = _require.contrastColor;\n\nvar API_KEY = __webpack_require__(/*! ../../config */ \"./config\"); //fetch function to populate the list of greetings from googlesheets api and populate the greetings array\n\n\nfunction fetchFromSheet() {\n  return _fetchFromSheet.apply(this, arguments);\n}\n\nfunction _fetchFromSheet() {\n  _fetchFromSheet = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n    var response, data, i;\n    return regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return fetch(\"https://sheets.googleapis.com/v4/spreadsheets/\".concat(SHEET_ID, \"/values/Sheet1?key=\").concat(SHEETS_API_KEY));\n\n          case 2:\n            response = _context.sent;\n            _context.next = 5;\n            return response.json();\n\n          case 5:\n            data = _context.sent;\n\n            //check if the sheet is not empty\n            if (data.values[0]) {\n              greetings = []; //data.values[0] is an array of the values in the first row of the sheet. populate the greetings array with the values\n\n              for (i = 0; i < data.values[0].length; i++) {\n                greetings.push(data.values[0][i]);\n              }\n            }\n\n            console.log(greetings);\n\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _fetchFromSheet.apply(this, arguments);\n}\n\nfetchFromSheet(); //calls *******************************************************************\n\ndocument.getElementById(\"copy__button\").addEventListener(\"click\", copyToClipboard);\ndocument.getElementById(\"shuffle__button\").addEventListener(\"click\", shuffle);\ndocument.getElementById(\"shuffle__button\").addEventListener(\"mouseover\", rotate);\ndocument.getElementById(\"about\").addEventListener(\"click\", toggleCard);\ndocument.getElementById(\"close__button\").addEventListener(\"click\", toggleCard); //functions ***************************************************************\n\nfunction rotate() {\n  //animate the shuffle button on click\n  document.getElementById(\"spinner\").classList.add(\"animate\");\n  setTimeout(function () {\n    document.getElementById(\"spinner\").classList.remove(\"animate\");\n  }, 260);\n}\n\nfunction shuffle() {\n  //select random from the list of greetings\n  var greeting;\n  var temp;\n  temp = greeting;\n  greeting = greetings[Math.floor(Math.random() * greetings.length)];\n\n  if (greeting == temp) {\n    shuffle();\n  } //display the greeting\n\n\n  document.getElementById(\"greeting\").innerHTML = greeting; //reset the copy button\n\n  document.getElementById(\"copy__button\").innerHTML = 'Copier<span id=\"copy__icon\" class=\"icon-copy\"></span>'; //generate a background to apply to the CSS var & a contrast color\n\n  var w = document.querySelector(\"#wrapper\");\n  var color = materialColor();\n  var contrast = contrastColor({\n    bgColor: color\n  });\n  w.style.setProperty(\"--main-bg-color\", color); //apply the background color\n\n  w.style.setProperty(\"--main-fg-color\", contrast); //apply the contrast color\n}\n\nfunction copyToClipboard() {\n  var range = document.createRange();\n  range.selectNode(document.getElementById(\"greeting\"));\n  window.getSelection().removeAllRanges(); // clear current selection\n\n  window.getSelection().addRange(range); // to select text\n\n  document.execCommand(\"copy\");\n  window.getSelection().removeAllRanges(); // to deselect\n\n  document.getElementById(\"copy__button\").innerHTML = \"<span id='copied'></span>\";\n  document.getElementById(\"copied\").classList.add(\"icon-checkmark\");\n}\n\nfunction pickRandomProperty(obj) {\n  var result;\n  var count = 0;\n\n  for (var prop in obj) {\n    if (Math.random() < 1 / ++count) result = prop;\n  }\n\n  return result;\n}\n\nfunction toggleCard() {\n  console.log(\"openCard\");\n  var toggle = document.getElementById(\"toggle\");\n  toggle.style.display === \"none\" ? toggle.style.display = \"block\" : toggle.style.display = \"none\";\n} //arrays ********************************************************************\n\n\nvar greetings = [\"Mes plus sincères salutations.\", \"Tchô, bonne!\", \"Je vous prie de bien vouloir iller, Madame, Monsieur, mes tes éminemment stantes.\", \"Meilleures salutations.\", \"Je vous prie de bien vouloir recevoir mes plus respectueuses salutations.\", \"Cordialement.\", \"Je vous prie d’agréer, Monsieur, mes salutations les plus dévouées.\", \"Je vous prie d’agréer, Madame, mes salutations les plus distinguées.\", \"Veuillez croire, Madame/Monsieur, en l’expression de mes sentiments les plus sincères.\", \"Bien à toi.\", \"Bien à vous.\", \"Je vous prie d’agréer mes meilleures salutations.\", \"Veuillez recevoir mes salutations distinguées.\", \"Au plaisir et amicalement.\", \"Je vous prie de croire, Madame, Monsieur, à ma considération distinguée.\", \"Veuillez recevoir, Madame, Monsieur, l'assurance de mes sincères salutations\", \"Je vous prie d'agréer mes plus respectueuses salutations.\", \"Veuillez recevoir l'assurance de ma considération distinguée.\", \"Avec mes respectueux hommages, je vous prie d’agréer, Madame, Monsieur, l’expression de ma considération la plus distinguée.\", \"Je vous prie d’agréer, Monsieur, l’assurance de mon profond respect.\", \"Nous vous prions de croire, Monsieur, à l'expression de nos sentiments les plus dévoués.\", \"Veuillez croire, cher Monsieur, à mes sentiments cordiaux et respectueux.\", \"Veuillez agréer, Madame, Monsieur, l’expression de mes sentiments respectueux.\", \"Cordialement vôtre.\", \"Je vous prie de croire, cher Prince/chère Princesse, en l'assurance de ma plus haute considération.\", \"En vous souhaitant cordialement une excellente journée.\", \"Je vous prie de bien vouloir agréer, Madame la marquise/ Monsieur le marquis, l'expression de mes honnêtes et respectueuses salutations.\", \"Je vous prie de bien vouloir croire, cher Comte/ chère Comtesse, en l'assurance de ma considération.\", \"Je vous prie de bien vouloir agréer, Madame la Baronne/ Monsieur le Baron, l'expression de mes honnêtes et respectueuses salutations.\", \"Veuillez croire à mon meilleur souvenir.\", \"Veuillez trouver ici l’assurance de mon amitié.\", \"Amitiés.\", \"Veuillez trouver ici l'assurance de mon amitié.\", \"Salutations distinguées.\", \"Semper Fidelis.\", \"Je vous prie de plésèfer, Madame, Monsieur, mes vrissèmes très croumibes.\", \"Salutations cordiales.\", \"Veuillez agréer, Madame, Monsieur, mes meilleures salutations.\", \"Sportivement.\", \"Vaccinalement.\", \"Vers l'infini, et au-delà!\", \"À la revoyure!\", \"À bientôt, si c'est pas avant.\"]; //array of greetings\n\nfunction materialColor() {\n  // colors from https://github.com/egoist/color-lib/blob/master/color.json\n  var colors = {\n    red: {\n      \"50\": \"#ffebee\",\n      \"100\": \"#ffcdd2\",\n      \"200\": \"#ef9a9a\",\n      \"300\": \"#e57373\",\n      \"400\": \"#ef5350\",\n      \"500\": \"#f44336\",\n      \"600\": \"#e53935\",\n      \"700\": \"#d32f2f\",\n      \"800\": \"#c62828\",\n      \"900\": \"#b71c1c\",\n      hex: \"#f44336\",\n      a100: \"#ff8a80\",\n      a200: \"#ff5252\",\n      a400: \"#ff1744\",\n      a700: \"#d50000\"\n    },\n    pink: {\n      \"50\": \"#fce4ec\",\n      \"100\": \"#f8bbd0\",\n      \"200\": \"#f48fb1\",\n      \"300\": \"#f06292\",\n      \"400\": \"#ec407a\",\n      \"500\": \"#e91e63\",\n      \"600\": \"#d81b60\",\n      \"700\": \"#c2185b\",\n      \"800\": \"#ad1457\",\n      \"900\": \"#880e4f\",\n      hex: \"#e91e63\",\n      a100: \"#ff80ab\",\n      a200: \"#ff4081\",\n      a400: \"#f50057\",\n      a700: \"#c51162\"\n    },\n    purple: {\n      \"50\": \"#f3e5f5\",\n      \"100\": \"#e1bee7\",\n      \"200\": \"#ce93d8\",\n      \"300\": \"#ba68c8\",\n      \"400\": \"#ab47bc\",\n      \"500\": \"#9c27b0\",\n      \"600\": \"#8e24aa\",\n      \"700\": \"#7b1fa2\",\n      \"800\": \"#6a1b9a\",\n      \"900\": \"#4a148c\",\n      hex: \"#9c27b0\",\n      a100: \"#ea80fc\",\n      a200: \"#e040fb\",\n      a400: \"#d500f9\",\n      a700: \"#aa00ff\"\n    },\n    deepPurple: {\n      \"50\": \"#ede7f6\",\n      \"100\": \"#d1c4e9\",\n      \"200\": \"#b39ddb\",\n      \"300\": \"#9575cd\",\n      \"400\": \"#7e57c2\",\n      \"500\": \"#673ab7\",\n      \"600\": \"#5e35b1\",\n      \"700\": \"#512da8\",\n      \"800\": \"#4527a0\",\n      \"900\": \"#311b92\",\n      hex: \"#673ab7\",\n      a100: \"#b388ff\",\n      a200: \"#7c4dff\",\n      a400: \"#651fff\",\n      a700: \"#6200ea\"\n    },\n    indigo: {\n      \"50\": \"#e8eaf6\",\n      \"100\": \"#c5cae9\",\n      \"200\": \"#9fa8da\",\n      \"300\": \"#7986cb\",\n      \"400\": \"#5c6bc0\",\n      \"500\": \"#3f51b5\",\n      \"600\": \"#3949ab\",\n      \"700\": \"#303f9f\",\n      \"800\": \"#283593\",\n      \"900\": \"#1a237e\",\n      hex: \"#3f51b5\",\n      a100: \"#8c9eff\",\n      a200: \"#536dfe\",\n      a400: \"#3d5afe\",\n      a700: \"#304ffe\"\n    },\n    blue: {\n      \"50\": \"#e3f2fd\",\n      \"100\": \"#bbdefb\",\n      \"200\": \"#90caf9\",\n      \"300\": \"#64b5f6\",\n      \"400\": \"#42a5f5\",\n      \"500\": \"#2196f3\",\n      \"600\": \"#1e88e5\",\n      \"700\": \"#1976d2\",\n      \"800\": \"#1565c0\",\n      \"900\": \"#0d47a1\",\n      hex: \"#2196f3\",\n      a100: \"#82b1ff\",\n      a200: \"#448aff\",\n      a400: \"#2979ff\",\n      a700: \"#2962ff\"\n    },\n    lightBlue: {\n      \"50\": \"#e1f5fe\",\n      \"100\": \"#b3e5fc\",\n      \"200\": \"#81d4fa\",\n      \"300\": \"#4fc3f7\",\n      \"400\": \"#29b6f6\",\n      \"500\": \"#03a9f4\",\n      \"600\": \"#039be5\",\n      \"700\": \"#0288d1\",\n      \"800\": \"#0277bd\",\n      \"900\": \"#01579b\",\n      hex: \"#03a9f4\",\n      a100: \"#80d8ff\",\n      a200: \"#40c4ff\",\n      a400: \"#00b0ff\",\n      a700: \"#0091ea\"\n    },\n    cyan: {\n      \"50\": \"#e0f7fa\",\n      \"100\": \"#b2ebf2\",\n      \"200\": \"#80deea\",\n      \"300\": \"#4dd0e1\",\n      \"400\": \"#26c6da\",\n      \"500\": \"#00bcd4\",\n      \"600\": \"#00acc1\",\n      \"700\": \"#0097a7\",\n      \"800\": \"#00838f\",\n      \"900\": \"#006064\",\n      hex: \"#00bcd4\",\n      a100: \"#84ffff\",\n      a200: \"#18ffff\",\n      a400: \"#00e5ff\",\n      a700: \"#00b8d4\"\n    },\n    teal: {\n      \"50\": \"#e0f2f1\",\n      \"100\": \"#b2dfdb\",\n      \"200\": \"#80cbc4\",\n      \"300\": \"#4db6ac\",\n      \"400\": \"#26a69a\",\n      \"500\": \"#009688\",\n      \"600\": \"#00897b\",\n      \"700\": \"#00796b\",\n      \"800\": \"#00695c\",\n      \"900\": \"#004d40\",\n      hex: \"#009688\",\n      a100: \"#a7ffeb\",\n      a200: \"#64ffda\",\n      a400: \"#1de9b6\",\n      a700: \"#00bfa5\"\n    },\n    green: {\n      \"50\": \"#e8f5e9\",\n      \"100\": \"#c8e6c9\",\n      \"200\": \"#a5d6a7\",\n      \"300\": \"#81c784\",\n      \"400\": \"#66bb6a\",\n      \"500\": \"#4caf50\",\n      \"600\": \"#43a047\",\n      \"700\": \"#388e3c\",\n      \"800\": \"#2e7d32\",\n      \"900\": \"#1b5e20\",\n      hex: \"#4caf50\",\n      a100: \"#b9f6ca\",\n      a200: \"#69f0ae\",\n      a400: \"#00e676\",\n      a700: \"#00c853\"\n    },\n    lightGreen: {\n      \"50\": \"#f1f8e9\",\n      \"100\": \"#dcedc8\",\n      \"200\": \"#c5e1a5\",\n      \"300\": \"#aed581\",\n      \"400\": \"#9ccc65\",\n      \"500\": \"#8bc34a\",\n      \"600\": \"#7cb342\",\n      \"700\": \"#689f38\",\n      \"800\": \"#558b2f\",\n      \"900\": \"#33691e\",\n      hex: \"#8bc34a\",\n      a100: \"#ccff90\",\n      a200: \"#b2ff59\",\n      a400: \"#76ff03\",\n      a700: \"#64dd17\"\n    },\n    lime: {\n      \"50\": \"#f9fbe7\",\n      \"100\": \"#f0f4c3\",\n      \"200\": \"#e6ee9c\",\n      \"300\": \"#dce775\",\n      \"400\": \"#d4e157\",\n      \"500\": \"#cddc39\",\n      \"600\": \"#c0ca33\",\n      \"700\": \"#afb42b\",\n      \"800\": \"#9e9d24\",\n      \"900\": \"#827717\",\n      hex: \"#cddc39\",\n      a100: \"#f4ff81\",\n      a200: \"#eeff41\",\n      a400: \"#c6ff00\",\n      a700: \"#aeea00\"\n    },\n    yellow: {\n      \"50\": \"#fffde7\",\n      \"100\": \"#fff9c4\",\n      \"200\": \"#fff59d\",\n      \"300\": \"#fff176\",\n      \"400\": \"#ffee58\",\n      \"500\": \"#ffeb3b\",\n      \"600\": \"#fdd835\",\n      \"700\": \"#fbc02d\",\n      \"800\": \"#f9a825\",\n      \"900\": \"#f57f17\",\n      hex: \"#ffeb3b\",\n      a100: \"#ffff8d\",\n      a200: \"#ffff00\",\n      a400: \"#ffea00\",\n      a700: \"#ffd600\"\n    },\n    amber: {\n      \"50\": \"#fff8e1\",\n      \"100\": \"#ffecb3\",\n      \"200\": \"#ffe082\",\n      \"300\": \"#ffd54f\",\n      \"400\": \"#ffca28\",\n      \"500\": \"#ffc107\",\n      \"600\": \"#ffb300\",\n      \"700\": \"#ffa000\",\n      \"800\": \"#ff8f00\",\n      \"900\": \"#ff6f00\",\n      hex: \"#ffc107\",\n      a100: \"#ffe57f\",\n      a200: \"#ffd740\",\n      a400: \"#ffc400\",\n      a700: \"#ffab00\"\n    },\n    orange: {\n      \"50\": \"#fff3e0\",\n      \"100\": \"#ffe0b2\",\n      \"200\": \"#ffcc80\",\n      \"300\": \"#ffb74d\",\n      \"400\": \"#ffa726\",\n      \"500\": \"#ff9800\",\n      \"600\": \"#fb8c00\",\n      \"700\": \"#f57c00\",\n      \"800\": \"#ef6c00\",\n      \"900\": \"#e65100\",\n      hex: \"#ff9800\",\n      a100: \"#ffd180\",\n      a200: \"#ffab40\",\n      a400: \"#ff9100\",\n      a700: \"#ff6d00\"\n    },\n    deepOrange: {\n      \"50\": \"#fbe9e7\",\n      \"100\": \"#ffccbc\",\n      \"200\": \"#ffab91\",\n      \"300\": \"#ff8a65\",\n      \"400\": \"#ff7043\",\n      \"500\": \"#ff5722\",\n      \"600\": \"#f4511e\",\n      \"700\": \"#e64a19\",\n      \"800\": \"#d84315\",\n      \"900\": \"#bf360c\",\n      hex: \"#ff5722\",\n      a100: \"#ff9e80\",\n      a200: \"#ff6e40\",\n      a400: \"#ff3d00\",\n      a700: \"#dd2c00\"\n    },\n    brown: {\n      \"50\": \"#efebe9\",\n      \"100\": \"#d7ccc8\",\n      \"200\": \"#bcaaa4\",\n      \"300\": \"#a1887f\",\n      \"400\": \"#8d6e63\",\n      \"500\": \"#795548\",\n      \"600\": \"#6d4c41\",\n      \"700\": \"#5d4037\",\n      \"800\": \"#4e342e\",\n      \"900\": \"#3e2723\",\n      hex: \"#795548\"\n    },\n    grey: {\n      \"50\": \"#fafafa\",\n      \"100\": \"#f5f5f5\",\n      \"200\": \"#eeeeee\",\n      \"300\": \"#e0e0e0\",\n      \"400\": \"#bdbdbd\",\n      \"500\": \"#9e9e9e\",\n      \"600\": \"#757575\",\n      \"700\": \"#616161\",\n      \"800\": \"#424242\",\n      \"900\": \"#212121\",\n      hex: \"#9e9e9e\"\n    },\n    blueGrey: {\n      \"50\": \"#eceff1\",\n      \"100\": \"#cfd8dc\",\n      \"200\": \"#b0bec5\",\n      \"300\": \"#90a4ae\",\n      \"400\": \"#78909c\",\n      \"500\": \"#607d8b\",\n      \"600\": \"#546e7a\",\n      \"700\": \"#455a64\",\n      \"800\": \"#37474f\",\n      \"900\": \"#263238\",\n      hex: \"#607d8b\"\n    },\n    black: {\n      hex: \"#000000\"\n    },\n    white: {\n      hex: \"#ffffff\"\n    }\n  }; // pick random property\n  //var property = pickRandomProperty(colors);\n\n  var colorList = colors[pickRandomProperty(colors)];\n  var newColorKey = pickRandomProperty(colorList);\n  var newColor = colorList[newColorKey];\n  return newColor;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/index.js\n");

/***/ }),

/***/ "./node_modules/contrast-color/lib/index.js":
/*!**************************************************!*\
  !*** ./node_modules/contrast-color/lib/index.js ***!
  \**************************************************/
/***/ (function(module) {

eval("const HEX_CHARS = [\n  \"0\",\n  \"1\",\n  \"2\",\n  \"3\",\n  \"4\",\n  \"5\",\n  \"6\",\n  \"7\",\n  \"8\",\n  \"9\",\n  \"A\",\n  \"B\",\n  \"C\",\n  \"D\",\n  \"E\",\n  \"F\",\n];\n\n// All CSS Levels 1-4 named colors\nconst NAMED_COLORS = {\n  aliceblue: \"#F0F8FF\",\n  antiquewhite: \"#FAEBD7\",\n  aqua: \"#00FFFF\",\n  aquamarine: \"#7FFFD4\",\n  azure: \"#F0FFFF\",\n  beige: \"#F5F5DC\",\n  bisque: \"#FFE4C4\",\n  black: \"#000000\",\n  blanchedalmond: \"#FFEBCD\",\n  blue: \"#0000FF\",\n  blueviolet: \"#8A2BE2\",\n  brown: \"#A52A2A\",\n  burlywood: \"#DEB887\",\n  cadetblue: \"#5F9EA0\",\n  chartreuse: \"#7FFF00\",\n  chocolate: \"#D2691E\",\n  coral: \"#FF7F50\",\n  cornflowerblue: \"#6495ED\",\n  cornsilk: \"#FFF8DC\",\n  crimson: \"#DC143C\",\n  cyan: \"#00FFFF\",\n  darkblue: \"#00008B\",\n  darkcyan: \"#008B8B\",\n  darkgoldenrod: \"#B8860B\",\n  darkgray: \"#A9A9A9\",\n  darkgreen: \"#006400\",\n  darkgrey: \"#A9A9A9\",\n  darkkhaki: \"#BDB76B\",\n  darkmagenta: \"#8B008B\",\n  darkolivegreen: \"#556B2F\",\n  darkorange: \"#FF8C00\",\n  darkorchid: \"#9932CC\",\n  darkred: \"#8B0000\",\n  darksalmon: \"#E9967A\",\n  darkseagreen: \"#8FBC8F\",\n  darkslateblue: \"#483D8B\",\n  darkslategray: \"#2F4F4F\",\n  darkslategrey: \"#2F4F4F\",\n  darkturquoise: \"#00CED1\",\n  darkviolet: \"#9400D3\",\n  deeppink: \"#FF1493\",\n  deepskyblue: \"#00BFFF\",\n  dimgray: \"#696969\",\n  dimgrey: \"#696969\",\n  dodgerblue: \"#1E90FF\",\n  firebrick: \"#B22222\",\n  floralwhite: \"#FFFAF0\",\n  forestgreen: \"#228B22\",\n  fuchsia: \"#FF00FF\",\n  gainsboro: \"#DCDCDC\",\n  ghostwhite: \"#F8F8FF\",\n  gold: \"#FFD700\",\n  goldenrod: \"#DAA520\",\n  gray: \"#808080\",\n  green: \"#008000\",\n  greenyellow: \"#ADFF2F\",\n  grey: \"#808080\",\n  honeydew: \"#F0FFF0\",\n  hotpink: \"#FF69B4\",\n  indianred: \"#CD5C5C\",\n  indigo: \"#4B0082\",\n  ivory: \"#FFFFF0\",\n  khaki: \"#F0E68C\",\n  lavender: \"#E6E6FA\",\n  lavenderblush: \"#FFF0F5\",\n  lawngreen: \"#7CFC00\",\n  lemonchiffon: \"#FFFACD\",\n  lightblue: \"#ADD8E6\",\n  lightcoral: \"#F08080\",\n  lightcyan: \"#E0FFFF\",\n  lightgoldenrodyellow: \"#FAFAD2\",\n  lightgray: \"#D3D3D3\",\n  lightgreen: \"#90EE90\",\n  lightgrey: \"#D3D3D3\",\n  lightpink: \"#FFB6C1\",\n  lightsalmon: \"#FFA07A\",\n  lightseagreen: \"#20B2AA\",\n  lightskyblue: \"#87CEFA\",\n  lightslategray: \"#778899\",\n  lightslategrey: \"#778899\",\n  lightsteelblue: \"#B0C4DE\",\n  lightyellow: \"#FFFFE0\",\n  lime: \"#00FF00\",\n  limegreen: \"#32CD32\",\n  linen: \"#FAF0E6\",\n  magenta: \"#FF00FF\",\n  maroon: \"#800000\",\n  mediumaquamarine: \"#66CDAA\",\n  mediumblue: \"#0000CD\",\n  mediumorchid: \"#BA55D3\",\n  mediumpurple: \"#9370DB\",\n  mediumseagreen: \"#3CB371\",\n  mediumslateblue: \"#7B68EE\",\n  mediumspringgreen: \"#00FA9A\",\n  mediumturquoise: \"#48D1CC\",\n  mediumvioletred: \"#C71585\",\n  midnightblue: \"#191970\",\n  mintcream: \"#F5FFFA\",\n  mistyrose: \"#FFE4E1\",\n  moccasin: \"#FFE4B5\",\n  navajowhite: \"#FFDEAD\",\n  navy: \"#000080\",\n  oldlace: \"#FDF5E6\",\n  olive: \"#808000\",\n  olivedrab: \"#6B8E23\",\n  orange: \"#FFA500\",\n  orangered: \"#FF4500\",\n  orchid: \"#DA70D6\",\n  palegoldenrod: \"#EEE8AA\",\n  palegreen: \"#98FB98\",\n  paleturquoise: \"#AFEEEE\",\n  palevioletred: \"#DB7093\",\n  papayawhip: \"#FFEFD5\",\n  peachpuff: \"#FFDAB9\",\n  peru: \"#CD853F\",\n  pink: \"#FFC0CB\",\n  plum: \"#DDA0DD\",\n  powderblue: \"#B0E0E6\",\n  purple: \"#800080\",\n  rebeccapurple: \"#663399\",\n  red: \"#FF0000\",\n  rosybrown: \"#BC8F8F\",\n  royalblue: \"#4169E1\",\n  saddlebrown: \"#8B4513\",\n  salmon: \"#FA8072\",\n  sandybrown: \"#F4A460\",\n  seagreen: \"#2E8B57\",\n  seashell: \"#FFF5EE\",\n  sienna: \"#A0522D\",\n  silver: \"#C0C0C0\",\n  skyblue: \"#87CEEB\",\n  slateblue: \"#6A5ACD\",\n  slategray: \"#708090\",\n  slategrey: \"#708090\",\n  snow: \"#FFFAFA\",\n  springgreen: \"#00FF7F\",\n  steelblue: \"#4682B4\",\n  tan: \"#D2B48C\",\n  teal: \"#008080\",\n  thistle: \"#D8BFD8\",\n  tomato: \"#FF6347\",\n  turquoise: \"#40E0D0\",\n  violet: \"#EE82EE\",\n  wheat: \"#F5DEB3\",\n  white: \"#FFFFFF\",\n  whitesmoke: \"#F5F5F5\",\n  yellow: \"#FFFF00\",\n  yellowgreen: \"#9ACD32\",\n};\n\nclass ContrastColor {\n  /* istanbul ignore next */\n  constructor({\n    bgColor = \"#FFFFFF\",\n    fgDarkColor = \"#000000\",\n    fgLightColor = \"#FFFFFF\",\n    defaultColor = \"#000000\",\n    threshold = 128,\n    customNamedColors = {},\n  } = {}) {\n    const defaults = {\n      bgColor,\n      fgDarkColor,\n      fgLightColor,\n      defaultColor,\n      threshold,\n      customNamedColors,\n    };\n    this.namedColors = { ...NAMED_COLORS, ...customNamedColors };\n    this.contrastColor = (options = {}) =>\n      contrastColor({\n        ...defaults,\n        ...options,\n        customNamedColors: {\n          ...defaults.customNamedColors,\n          ...options.customNamedColors,\n        },\n      });\n  }\n}\n\nfunction contrastColor({\n  bgColor = \"#FFFFFF\",\n  fgDarkColor = \"#000000\",\n  fgLightColor = \"#FFFFFF\",\n  defaultColor = \"#000000\",\n  threshold = 128,\n  customNamedColors = {},\n} = {}) {\n  this.namedColors = { ...NAMED_COLORS, ...customNamedColors };\n\n  const [\n    namedBgColor,\n    namedFgDarkColor,\n    namedFgLightColor,\n    namedDefaultColor,\n  ] = [bgColor, fgDarkColor, fgLightColor, defaultColor].map(\n    (p) => this.namedColors[p]\n  );\n\n  let bgColorArray = String(namedBgColor || bgColor)\n    .toUpperCase()\n    .split(\"\")\n    .filter((c) => HEX_CHARS.includes(c));\n\n  switch (bgColorArray.length) {\n    case 3:\n    case 4:\n      // 3 e.g. #FFF\n      // 4 e.g. #1234 <- (3hex + alpha-channel)\n      bgColorArray = bgColorArray.slice(0, 3).map((c) => `${c}${c}`);\n      break;\n    case 6:\n    case 8:\n      // 6 e.g. #789ABC <- ideal\n      // 8 e.g. #789ABC00 <- (6hex + alpha-channel)\n      bgColorArray = bgColorArray\n        .slice(0, 6)\n        .reduce(\n          (acc, curr, n, arr) =>\n            n % 2 ? [...acc, `${arr[n - 1]}${curr}`] : acc,\n          []\n        );\n      break;\n    default:\n      // Invalid bgColor value, so you get the default\n      return namedDefaultColor || defaultColor;\n  }\n\n  const [r, g, b] = bgColorArray.map((h) => parseInt(h, 16));\n  const yiq = (r * 299 + g * 587 + b * 114) / 1000;\n  const darkOrLight =\n    yiq >= threshold\n      ? namedFgDarkColor || fgDarkColor\n      : namedFgLightColor || fgLightColor;\n  return darkOrLight;\n}\n\nmodule.exports = ContrastColor;\nmodule.exports.contrastColor = contrastColor;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/contrast-color/lib/index.js\n");

/***/ }),

/***/ "./src/css/constants.css":
/*!*******************************!*\
  !*** ./src/css/constants.css ***!
  \*******************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvY3NzL2NvbnN0YW50cy5jc3MuanMiLCJtYXBwaW5ncyI6IjtBQUFBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc2FsdXRhdGlvbnMvLi9zcmMvY3NzL2NvbnN0YW50cy5jc3M/NzdjYyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cbmV4cG9ydCB7fTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/css/constants.css\n");

/***/ }),

/***/ "./src/css/icomoon.css":
/*!*****************************!*\
  !*** ./src/css/icomoon.css ***!
  \*****************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvY3NzL2ljb21vb24uY3NzLmpzIiwibWFwcGluZ3MiOiI7QUFBQSIsInNvdXJjZXMiOlsid2VicGFjazovL3NhbHV0YXRpb25zLy4vc3JjL2Nzcy9pY29tb29uLmNzcz9iMzU5Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxuZXhwb3J0IHt9OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/css/icomoon.css\n");

/***/ }),

/***/ "./src/css/main.css":
/*!**************************!*\
  !*** ./src/css/main.css ***!
  \**************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvY3NzL21haW4uY3NzLmpzIiwibWFwcGluZ3MiOiI7QUFBQSIsInNvdXJjZXMiOlsid2VicGFjazovL3NhbHV0YXRpb25zLy4vc3JjL2Nzcy9tYWluLmNzcz80ZmFhIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxuZXhwb3J0IHt9OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/css/main.css\n");

/***/ }),

/***/ "./node_modules/regenerator-runtime/runtime.js":
/*!*****************************************************!*\
  !*** ./node_modules/regenerator-runtime/runtime.js ***!
  \*****************************************************/
/***/ (function(module) {

eval("/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; };\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function define(obj, key, value) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n    return obj[key];\n  }\n  try {\n    // IE 8 has a broken Object.defineProperty that only works on DOM objects.\n    define({}, \"\");\n  } catch (err) {\n    define = function(obj, key, value) {\n      return obj[key] = value;\n    };\n  }\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    defineProperty(generator, \"_invoke\", { value: makeInvokeMethod(innerFn, self, context) });\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  define(IteratorPrototype, iteratorSymbol, function () {\n    return this;\n  });\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = GeneratorFunctionPrototype;\n  defineProperty(Gp, \"constructor\", { value: GeneratorFunctionPrototype, configurable: true });\n  defineProperty(\n    GeneratorFunctionPrototype,\n    \"constructor\",\n    { value: GeneratorFunction, configurable: true }\n  );\n  GeneratorFunction.displayName = define(\n    GeneratorFunctionPrototype,\n    toStringTagSymbol,\n    \"GeneratorFunction\"\n  );\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      define(prototype, method, function(arg) {\n        return this._invoke(method, arg);\n      });\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      define(genFun, toStringTagSymbol, \"GeneratorFunction\");\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return PromiseImpl.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return PromiseImpl.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    defineProperty(this, \"_invoke\", { value: enqueue });\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  define(AsyncIterator.prototype, asyncIteratorSymbol, function () {\n    return this;\n  });\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    if (PromiseImpl === void 0) PromiseImpl = Promise;\n\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList),\n      PromiseImpl\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var methodName = context.method;\n    var method = delegate.iterator[methodName];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method, or a missing .next mehtod, always terminate the\n      // yield* loop.\n      context.delegate = null;\n\n      // Note: [\"return\"] must be used for ES3 parsing compatibility.\n      if (methodName === \"throw\" && delegate.iterator[\"return\"]) {\n        // If the delegate iterator has a return method, give it a\n        // chance to clean up.\n        context.method = \"return\";\n        context.arg = undefined;\n        maybeInvokeDelegate(delegate, context);\n\n        if (context.method === \"throw\") {\n          // If maybeInvokeDelegate(context) changed context.method from\n          // \"return\" to \"throw\", let that override the TypeError below.\n          return ContinueSentinel;\n        }\n      }\n      if (methodName !== \"return\") {\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a '\" + methodName + \"' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  define(Gp, toStringTagSymbol, \"Generator\");\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  define(Gp, iteratorSymbol, function() {\n    return this;\n  });\n\n  define(Gp, \"toString\", function() {\n    return \"[object Generator]\";\n  });\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(val) {\n    var object = Object(val);\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n   true ? module.exports : 0\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, in modern engines\n  // we can explicitly access globalThis. In older engines we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  if (typeof globalThis === \"object\") {\n    globalThis.regeneratorRuntime = runtime;\n  } else {\n    Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/regenerator-runtime/runtime.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	!function() {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = function(module) {
/******/ 			var getter = module && module.__esModule ?
/******/ 				function() { return module['default']; } :
/******/ 				function() { return module; };
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	!function() {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = function(exports, definition) {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	!function() {
/******/ 		__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	!function() {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = function(exports) {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	}();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.js");
/******/ 	
/******/ })()
;